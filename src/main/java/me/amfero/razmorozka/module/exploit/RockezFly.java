package me.amfero.razmorozka.module.exploit;

import me.amfero.razmorozka.module.Category;
import me.amfero.razmorozka.module.Module;
import me.amfero.razmorozka.setting.Setting;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

public class RockezFly extends Module {

	private final Setting verticalSpeed = new Setting("VerticalSpeed", this, 5, 5, 10);
	private final Setting speed = new Setting("Speed", this, 4, 2, 10);
	
	public RockezFly(String name, String description, Category category) {
		super(name, description, category);
		addSetting(verticalSpeed);
		addSetting(speed);
	}
	
	@SubscribeEvent
	public void onUpdate(final TickEvent.ClientTickEvent event) {
		if(mc.world == null) {
			return;
		}
		if(mc.player.isRiding()) {
			mc.player.getRidingEntity().setNoGravity(true);
			mc.player.getRidingEntity().motionY = 0.0;
			
			if (mc.gameSettings.keyBindJump.isKeyDown()) {
				mc.player.getRidingEntity().motionY = this.verticalSpeed.getIntegerValue() / 5;
			} 
			
			if(mc.gameSettings.keyBindSprint.isKeyDown()) {
				mc.player.getRidingEntity().motionY = this.verticalSpeed.getIntegerValue() / -5;
			}
			
			double[] normalDir = this.directionSpeed(this.speed.getIntegerValue() / 2);
			if (mc.player.movementInput.moveStrafe != 0.0f || mc.player.movementInput.moveForward != 0.0f) {
	            mc.player.getRidingEntity().motionX = normalDir[0];
	            mc.player.getRidingEntity().motionZ = normalDir[1];
	        } else {
	            mc.player.getRidingEntity().motionX = 0.0;
	            mc.player.getRidingEntity().motionZ = 0.0;
	        }
		}
	}
	
    private double[] directionSpeed(double speed) {
        float forward = mc.player.movementInput.moveForward;
        float side = mc.player.movementInput.moveStrafe;
        float yaw = mc.player.prevRotationYaw + (mc.player.rotationYaw - mc.player.prevRotationYaw) * mc.getRenderPartialTicks();
        if (forward != 0.0f) {
            if (side > 0.0f) {
                yaw += (float) (forward > 0.0f ? -45 : 45);
            } else if (side < 0.0f) {
                yaw += (float) (forward > 0.0f ? 45 : -45);
            }
            side = 0.0f;
            if (forward > 0.0f) {
                forward = 1.0f;
            } else if (forward < 0.0f) {
                forward = -1.0f;
            }
        }
        double sin = Math.sin(Math.toRadians(yaw + 90.0f));
        double cos = Math.cos(Math.toRadians(yaw + 90.0f));
        double posX = (double) forward * speed * cos + (double) side * speed * sin;
        double posZ = (double) forward * speed * sin - (double) side * speed * cos;
        return new double[]{posX, posZ};
    }
	
}
